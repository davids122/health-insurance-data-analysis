## Loop through each file in folder_contents
for (i in n_files) {
## read i'th csv file from folder contents, store in "dat"
dat <- read_csv(paste0("GEOG215-Exam2-data/", folder_contents[i]))
##
state_dat$DATE[i] <- str_sub(folder_contents[i], 22, 31)
## INSERT COMMENT HERE
state_dat$CASES[i] <- sum(dat$CASES, na.rm = TRUE)
## INSERT COMMENT HERE
state_dat$DEATHS[i] <- sum(dat$Deaths, na.rm = TRUE)
}
View(dat)
## Loop through each file in folder_contents
for (i in 1:n_files) {
## read i'th csv file from folder contents, store in "dat"
dat <- read_csv(paste0("GEOG215-Exam2-data/", folder_contents[i]))
##
state_dat$DATE[i] <- str_sub(folder_contents[i], 22, 31)
## INSERT COMMENT HERE
state_dat$CASES[i] <- sum(dat$CASES, na.rm = TRUE)
## INSERT COMMENT HERE
state_dat$DEATHS[i] <- sum(dat$Deaths, na.rm = TRUE)
}
## Loop through each file in folder_contents
for (i in 1:n_files) {
## read i'th csv file from folder contents, store in "dat"
dat <- read_csv(paste0("GEOG215-Exam2-data/", folder_contents[i]))
## Put date into state_dat by taking substring from name of file
state_dat$DATE[i] <- str_sub(folder_contents[i], 22, 31)
## INSERT COMMENT HERE
state_dat$CASES[i] <- sum(dat$Cases, na.rm = TRUE)
## INSERT COMMENT HERE
state_dat$DEATHS[i] <- sum(dat$Deaths, na.rm = TRUE)
}
knitr::opts_chunk$set(echo = TRUE)
# Libraries
library(sf)
# Libraries
library(sf)
library(tmap)
library(tidyverse)
library(tmap)
library(tidyverse)
nc_counties <- read_sf(dsn = "https://gis11.services.ncdot.gov/arcgis/rest/services/NCDOT_CountyBdy_Poly/MapServer/0/query?outFields=*&where=1%3D1&f=geojson")
vacc_data <- read_csv("https://www.pauldelamater.net/geog215/exams/NC_Vaccination_Data.csv")
# Calculate percent of 12+ that are vaccinated
vacc_data <- vacc_data |> mutate(percent_vaccinated = VACCINATED / POP_A12p * 100)
# Select % vaccinated, gelid, name columns
vacc_data <- vacc_data |> select( c(GEOID, NAME, percent_vaccinated))
# rename "Name" column to "CountyName to match NC_counties column name
vacc_data <- vacc_data |> rename("CountyName" = NAME)
# table join two tables using "CountyName" as key field
joined_nc_vacc <- left_join(nc_counties, vacc_data, by = "CountyName")
##################
#      Map       #
##################
tmap_mode("view") +
joined_nc_vacc |>
tm_shape() +
tm_polygons("percent_vaccinated",
style = "jenks",
palette = "Greens",
alpha = 0.9,
border.col = "black",
border.alpha = 0.4,
title = "Percent of people 12+ fully vaccinated",
legend.show = TRUE) +
tm_borders(col = "black") +
tm_layout(frame = FALSE)
View(joined_nc_vacc)
# remove some unnecessary columns in joined table
joined_nc_vacc <- joined_nc_vacc |> select(c(-FIPS))
# remove some unnecessary columns in joined table
joined_nc_vacc <- joined_nc_vacc |> select(c(-FIPS, -OBJECTID))
# table join two tables using "CountyName" as key field
joined_nc_vacc <- left_join(nc_counties, vacc_data, by = "CountyName")
# remove some unnecessary columns in joined table
joined_nc_vacc <- joined_nc_vacc |> select(c(-FIPS, -OBJECTID))
##################
#      Map       #
##################
tmap_mode("view") +
joined_nc_vacc |>
tm_shape() +
tm_polygons("percent_vaccinated",
style = "jenks",
palette = "Greens",
alpha = 0.9,
border.col = "black",
border.alpha = 0.4,
title = "Percent of people 12+ fully vaccinated",
legend.show = TRUE) +
tm_borders(col = "black") +
tm_layout(frame = FALSE)
#### Load libraries
library(tidyverse)
library(ggthemes)
mi_hosp <- read_csv("https://delamater.web.unc.edu/files/2019/08/MIHOSP.csv")
## Create plot
pl <- ggplot(mi_hosp,                   ## R object
aes(x = BEDS2016)) +       ## Column in object
geom_histogram(na.rm = TRUE,    ## Add histogram bars without NA warning
binwidth = 30,   ## Add histogram bars
fill = "black",  ## Fill color of histogram bars
col = "white",   ## Line color of histogram bars
size = 0.4,      ## Line weight/thickness of historam bars
alpha = 0.75) +  ## Fill transparency
labs(x = "Beds (2016)",                          ## X axis label
y = "Number of Hospitals",                  ## Y axis label
title = "Acute Care Hospital Beds",         ## Main title
subtitle = "Michigan Hospitals",            ## Subtitle
caption = "GEOG 215, (Your Name Here)") +    ## Caption area
theme_tufte() +                                  ## Apply theme
theme(plot.title = element_text(size = 14,       ## Title font size
face = "bold"),  ## Title font face
plot.subtitle = element_text(size = 12))   ## Subitle font size
## Save plot
ggsave("GEOG215-ex23-GGhistogram.png",
pl,
width = 8,
height = 4.5,
units = "in",
dpi = 300,
bg = "white")
## Create plot
pl <- ggplot(mi_hosp,                   ## R object
aes(x = BEDS2016)) +       ## Column in object
geom_histogram(na.rm = TRUE,    ## Add histogram bars without NA warning
binwidth = 30,   ## Add histogram bars
fill = "black",  ## Fill color of histogram bars
col = "white",   ## Line color of histogram bars
size = 0.4,      ## Line weight/thickness of historam bars
alpha = 0.75) +  ## Fill transparency
labs(x = "Beds (2016)",                          ## X axis label
y = "Number of Hospitals",                  ## Y axis label
title = "Acute Care Hospital Beds",         ## Main title
subtitle = "Michigan Hospitals",            ## Subtitle
caption = "GEOG 215, (Your Name Here)") +    ## Caption area
theme_tufte() +                                  ## Apply theme
theme(plot.title = element_text(size = 14,       ## Title font size
face = "bold"),  ## Title font face
plot.subtitle = element_text(size = 12))   ## Subitle font size
#### Load libraries
library(tidyverse)
library(ggthemes)
#### Load libraries
download.packages(ggthemes)
install.packages("ggthemes")
#### Load libraries
library(tidyverse)
library(ggthemes)
#### Options
## Turn off scientific notation
options(scipen = 999)
mi_hosp <- read_csv("https://delamater.web.unc.edu/files/2019/08/MIHOSP.csv")
## Create plot
pl <- ggplot(mi_hosp,                   ## R object
aes(x = BEDS2016)) +       ## Column in object
geom_histogram(na.rm = TRUE,    ## Add histogram bars without NA warning
binwidth = 30,   ## Add histogram bars
fill = "black",  ## Fill color of histogram bars
col = "white",   ## Line color of histogram bars
size = 0.4,      ## Line weight/thickness of historam bars
alpha = 0.75) +  ## Fill transparency
labs(x = "Beds (2016)",                          ## X axis label
y = "Number of Hospitals",                  ## Y axis label
title = "Acute Care Hospital Beds",         ## Main title
subtitle = "Michigan Hospitals",            ## Subtitle
caption = "GEOG 215, (Your Name Here)") +    ## Caption area
theme_tufte() +                                  ## Apply theme
theme(plot.title = element_text(size = 14,       ## Title font size
face = "bold"),  ## Title font face
plot.subtitle = element_text(size = 12))   ## Subitle font size
## Save plot
ggsave("GEOG215-ex23-GGhistogram.png",
pl,
width = 8,
height = 4.5,
units = "in",
dpi = 300,
bg = "white")
#### Load libraries
library(tidyverse)
library(ggthemes)
library(RColorBrewer)
#### Options
## Turn off scientific notation
options(scipen = 999)
## From 2020 Decennial Census
nc_pop_cnty_DEC20 <- get_decennial(state = "NC",
year = 2020,
geography = "county",
sumfile = "dp",
variables = "DP1_0001C")
#### Load libraries
library(tidyverse)
library(ggthemes)
library(RColorBrewer)
#### Options
## Turn off scientific notation
options(scipen = 999)
## From 2020 Decennial Census
nc_pop_cnty_DEC20 <- get_decennial(state = "NC",
year = 2020,
geography = "county",
sumfile = "dp",
variables = "DP1_0001C")
library(tidycensus)
library(ggthemes)
library(RColorBrewer)
#### Options
## Turn off scientific notation
options(scipen = 999)
## From 2020 Decennial Census
nc_pop_cnty_DEC20 <- get_decennial(state = "NC",
year = 2020,
geography = "county",
sumfile = "dp",
variables = "DP1_0001C")
## From 2020 Decennial Census
nc_pop_cnty_DEC20 <- get_decennial(state = "NC",
year = 2020,
geography = "county",
sumfile = "dp",
variables = "DP1_0001C")
## From 2022 Population Estimates Program
nc_pop_cnty_PEP22 <- get_estimates(state = "NC",
year = 2022,
geography = "county",
time_series = FALSE,
variables = "POPESTIMATE")
## From 2021 American Community Survey
nc_pop_cnty_ACS21 <- get_acs(state = "NC",
year = 2021,
geography = "county",
survey = "acs5",
variables = "B01001_001")
## Bind data in one large holder
nc_pop_dat <- bind_rows(nc_pop_cnty_DEC20 |> select(GEOID,
POP = value) |>
mutate(TYPE = "Census"),
nc_pop_cnty_PEP22 |> select(GEOID,
POP = value) |>
mutate(TYPE = "Estimate"),
nc_pop_cnty_ACS21 |> select(GEOID,
POP = estimate) |>
mutate(TYPE = "ACS"))
d_plot <- ggplot(nc_pop_dat,           ## R object
aes(x = POP,          ## Column in object
fill = TYPE)) +   ## Variable to distinguish observations
geom_density(na.rm = TRUE,           ## Add density lines and fills without NA warning
size = 0.25,             ## Light line
alpha = 0.2) +          ## Fill transparency
scale_fill_brewer(palette = "Accent",                ## Use color brewer for fills
name = "Data Type",                ## Legend title
labels = c("ACS",                    ## 1st legend label
"Census",                 ## 2nd legend label
"Estimate")) +            ## 3rd legend label
labs(x = "Population",                                 ## X axis label
y = "Density",                                    ## Y axis label
title = "Total Population",                       ## Main title
subtitle = "By County",                           ## Subtitle
caption = "GEOG 215, (Your Name Here)") +         ## Caption area
theme_minimal() +                                    ## Apply theme
theme(plot.title = element_text(color = "grey20",    ## Title font color
size = 14,           ## Title font size
face = "bold"),      ## Title font face
plot.subtitle = element_text(size = 11),       ## Subitle font size
legend.position = "bottom",                    ## Modify legend position
legend.box = "horizontal",                     ## Modify legend orientation
legend.title = element_text(size = 9,          ## Legend title text size
color = "grey20"), ## Legend title text color
legend.text = element_text(size = 8,           ## Legend labels text size
color = "grey20"))  ## Legend labels text color
ggsave("GEOG215-ex24-GGdensityplot.png",
d_plot,
width = 10,
height = 6,
units = "in",
dpi = 300,
bg = "white")
knitr::opts_chunk$set(echo = TRUE)
## Get Wird Count Statistics
word_count <- wordcountaddin::text_stats()
## Create Kable table for word count
wourd_count |>
table() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
library(kableExtra)
## Create Kable table for word count
wourd_count |>
table() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
## Create Kable table for word count
word_count |>
table() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
## Create Kable table for word count
word_count[1, 1] |>
table() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
## Create Kable table for word count
word_count[1] |>
table() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
?text_stats
## Get Wird Count Statistics
word_count <- text_stats()
## Get Word Count Statistics
word_count <-
## Create Kable table for word count
wordcountaddin::text_stats() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
## Get Word Count Statistics
word_count <-
## Create Kable table for word count
wordcountaddin::text_stats() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
## Get Word Count Statistics
word_count <-
## Create Kable table for word count
wordcountaddin::text_stats() |>
table() |>
kable(align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
library(knitr)
library(wordcountaddin)
## Get Word Count Statistics
text_stats = text_stats()
## Create Kable table for word count
text_stats() |>
kable()
## Get Word Count Statistics
text_stats = text_stats()
## Create Kable table for word count
table <- kable(text_stats)
print(table)
## Get Word Count Statistics
text_stats = text_stats()
## Create Kable table for word count
table <- kable(text_stats, "html")
print(table)
## Create Kable table for word count
wordcountaddin::text_stats()|> kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T)
## Create kable table to summarize lisa results and add header above
NC_pub_transport_lisa$CATNAME |>
table() |>
kable(col.names = c("Outliers", "Frequency"),
align = "l") |>
kable_styling(bootstrap_options = c("striped",
"hover",
"condensed",
"responsive"),
full_width = T) |> add_header_above(c("Lisa Results" = 1))
knitr::opts_chunk$set(echo = TRUE)
## Read in 2020 transportation data
data_2020 <- read_csv(file = "../data/NC_2020_transportation_data.csv")
?read_csv
??read_csv
## Load Libraries
library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
?get_acs
## Census_API Key
census_api_key("db2a1697ae2c7a4b62e9a08778a72d60d6f8b775", overwrite = TRUE)
health_insurance_data = get_acs(geography = "tract",
variables = c("B27010_018E",
"B27010_019E"),
year = 2020,
output = "wide")
health_insurance_data = get_acs(geography = "county",
variables = c("B27010_018E",
"B27010_019E"),
year = 2020,
output = "wide")
View(health_insurance_data)
health_insurance_data = get_acs(geography = "tract",
variables = c("B27010_018E",
"B27010_019E"),
year = 2020,
output = "wide")
health_insurance_data = get_acs(geography = "county",
variables = c("B27010_018E",
"B27010_019E"),
year = 2020,
output = "wide")
health_insurance_data = get_acs(geography = "state",
variables = c("B27010_018E",
"B27010_019E"),
year = 2020,
output = "wide")
View(health_insurance_data)
?states
## Get Cartographic Boundary File for USA
states(cb = TRUE,
resolution = "500k",
year = "2020")
## Get Cartographic Boundary File for USA
usa_boundaries_sf <- states(cb = TRUE,
resolution = "500k",
year = "2020")
View(usa_boundaries_sf)
setwd("/Users/davidsprague/personal_work/personal_projects/health-insurance-data-analysis/code")
## write 2020 health insurance data to data folder as .csv file
write_csv(NC_2020_tranportation_data,
file = "../data/usa_health_insurance_data.csv")
## write 2020 health insurance data to data folder as .csv file
write_csv(health_insurance_data,
file = "../data/usa_health_insurance_data.csv")
## write 2020 health insurance data to data folder as .csv file
write_csv(health_insurance_data,
file = "../data/usa_health_insurance_data.csv")
## write 2020 health insurance data to data folder as .csv file
write_csv(health_insurance_data,
file = "../raw_data/usa_health_insurance_data.csv")
## Write spatial layer to data folder as .gpkg file
write_sf(usa_boundaries_sf, "../raw_data/usa_states.gpkg")
## Load Libraries
library(tidycensus)
library(tidyverse)
library(tigris)
library(sf)
## Census_API Key
census_api_key("db2a1697ae2c7a4b62e9a08778a72d60d6f8b775", overwrite = TRUE)
## Get USA health insurance data from American Community Survey API. Retrieve
## population of people aged 19-34 that are non-institutionalized, and number
## of those  who have at least one type of health insurance.
health_insurance_data <-get_acs(geography = "state",
variables = c("B27010_018E",
"B27010_019E"),
year = 2020,
output = "wide")
## Get Cartographic Boundary File for USA
usa_boundaries_sf <- states(cb = TRUE,
resolution = "500k",
year = "2020")
## Write 2020 health insurance data to data folder as .csv file
write_csv(health_insurance_data,
file = "../raw_data/usa_health_insurance_data.csv")
## Write spatial layer to data folder as .gpkg file
write_sf(usa_boundaries_sf, "../raw_data/usa_states.gpkg")
setwd("/Users/davidsprague/personal_work/personal_projects/health-insurance-data-analysis/code")
knitr::opts_chunk$set(echo = TRUE)
## Read in 2020 health insurance data
insurance_data <- read_csv(file = "../raw_data/usa_health_insurance_data.csv")
## Read in Spatial data layer
states <- read_sf("../raw_data/usa_states.gpkg")
View(insurance_data)
View(states)
## Select columns needed from insurance data
insurance_data <- insurance_data |> select(c(GEOID,
B27010_018E,
B27010_019E))
## Rename columns in insurance data table
insurance_data <- insurance_data |> rename(population_19_34 = B27010_018E,
people_with_health_insurance = B27010_019E)
## Create column for percentage of people who have health insurance in each state aged 19-34
insurance_data <- insurance_data |> mutate(percent_has_insurance = population_19_34 / people_with_health_insurance * 100)
## Create column for percentage of people who have health insurance in each state aged 19-34
insurance_data <- insurance_data |> mutate(percent_has_insurance = people_with_health_insurance / population_19_34 * 100)
## Select only GEOID,  GEOM, and NAME columns from spatial data layer
states <- states |> select(GEOID, NAME, geom)
## Join spatial data layer with insurance data
joined_insurance_spatial_data <- left_join(states, insurance_data, by = "GEOID")
View(joined_insurance_spatial_data)
View(joined_insurance_spatial_data)
View(joined_insurance_spatial_data)
